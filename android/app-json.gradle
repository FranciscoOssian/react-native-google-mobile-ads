import groovy.json.JsonOutput
import groovy.json.JsonSlurper

String[] fileNames = ["app.json", "app.config.js"]
String fileName = null
String jsonRoot = "react-native-google-mobile-ads"
String jsonRaw = "GOOGLE_MOBILE_ADS_JSON_RAW"

File configFile = null
File parentDir = rootProject.projectDir

for (int i = 0; i <= 3; i++) {
  if (parentDir == null) break
  parentDir = parentDir.parentFile
  if (parentDir != null) {
    configFile = new File(parentDir, fileNames[0])
    if (configFile.exists()){
      fileName = fileNames[0]
      break
    }
    else{
      configFile = new File(parentDir, fileNames[1])
      if (configFile.exists()){
        fileName = fileNames[0]
        break
      }
    }
  }
}

// Read .env file and construct env vars map
Map<String, String> envVars = null
File envFile = new File(parentDir, '.env')
if (envFile.exists()) {
  String envContent = envFile.text
  for (String line : envContent.split('\n')) {
    def (key, value) = line.split('=')
    envVars[key] = value
  }
}

if (configFile != null && configFile.exists()) {
  rootProject.logger.info ":${project.name} ${fileName} found at ${configFile.toString()}"
  Object json = null

  try {
    //json = new JsonSlurper().parseText(jsonFile.text)
    def configOutput = [
      "node",
      "-r",
      "@babel/register",
      "-e",
      "console.log(JSON.stringify(require('${configFile.absolutePath}')));"
    ]
      .execute(envVars, projectDir)  // Pass env vars to node process
      .text
      .trim()
    if (configOutput && !configOutput.isEmpty()) {
      json = new JsonSlurper().parseText(configOutput.toString())
    } else {
      rootProject.logger.warn ":${project.name} received empty output while parsing ${configFile} found at ${configFile.toString()}."
    }
  } catch (Exception ignored) {
    rootProject.logger.warn ":${project.name} failed to parse ${configFile} found at ${configFile.toString()}."
    rootProject.logger.warn ignored.toString()
  }

  if (json && json[jsonRoot]) {
    String jsonStr = JsonOutput.toJson(JsonOutput.toJson(json[jsonRoot]))

    rootProject.ext.googleMobileAdsJson = [
      raw: json[jsonRoot],
      isFlagEnabled: { key, defaultValue ->
        if (json[jsonRoot] == null || json[jsonRoot][key] == null) return defaultValue
        return json[jsonRoot][key] == true ? true : false
      },
      getStringValue: { key, defaultValue ->
        if (json[jsonRoot] == null) return defaultValue
        return json[jsonRoot][key] ? json[jsonRoot][key] : defaultValue
      }
    ]

    rootProject.logger.info ":${project.name} found ${jsonRoot} json root in ${fileName}, creating app build config"
    android {
      defaultConfig {
        buildConfigField "String", jsonRaw, jsonStr
      }
    }
  } else {
    rootProject.ext.googleAdsJson = false
    rootProject.logger.info ":${project.name} ${fileName} found with no ${jsonRoot} config, skipping"
    android {
      defaultConfig {
        buildConfigField "String", jsonRaw, '"{}"'
      }
    }
  }
} else {
  rootProject.ext.googleMobileAdsJson = false
  rootProject.logger.info ":${project.name} no ${fileName} found, skipping"
  android {
    defaultConfig {
      buildConfigField "String", jsonRaw, '"{}"'
    }
  }
}
